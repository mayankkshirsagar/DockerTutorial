# RUN THESE COMMANDS FROM THE LOCATION OF THE DOCKERFILE

# Build the Docker image , -t java-hello-world-custom-tag = custom name for the image ,
# [.] indicates search for docker file in pwd directory
docker build -t java-hello-world-custom-tag .

# Run the container , --rm means remove container once done running
docker run --rm java-hello-world-custom-tag

# create a tar of the docker image
docker save -o java-hello-world-custom-tag.tar java-hello-world-custom-tag

# load image from the tar
docker load -i java-hello-world-custom-tag.tar

# why multistage image reduces size ?
Even if every stage uses a full base OS image like ubuntu, the final image only includes:
    1. The final stageâ€™s base image (e.g., alpine, ubuntu, etc.)
    2. Any files copied into it
    3. No leftover build tools, compilers, source code, or previous image layers unless explicitly copied
Each stage is a separate image, and Docker only uses the final one to produce the final result.

# Why RUN echo ... output might be hidden during build?
BuildKit (modern default builder) buffers and hides the output of RUN commands that complete successfully.
It only shows output if the command fails or if you disable BuildKit.
So even though echo "date is : $DATE" runs and prints text, you might not see it in the build logs.
DOCKER_BUILDKIT=0 docker build --build-arg DATE="5-10-15" -t java-hello-world-custom-tag .

# docker Registry

